name: Rust

on:
  push:
    branches: [master]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  Setup:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.read.outputs.version }}
      tag: ${{ steps.read.outputs.tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          components: rustfmt, clippy

      - name: Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Build
        run: cargo install toml-cli

      - name: Save
        uses: actions/cache@v3
        with:
          path: ~/.cargo/bin/toml
          key: toml-cli-${{ runner.os }}

      - name: Read
        id: read
        run: |
          VERSION=$(toml get Cargo.toml package.version --raw)
          echo "detected version: $VERSION"
          if [ -z "$VERSION" ]; then
            echo "❌ failed to read version from Cargo.toml"
            exit 1
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=v$VERSION" >> $GITHUB_OUTPUT

  Check:
    needs: Setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          components: rustfmt

      - name: Format
        run: cargo fmt -- --check

  Tests:
    needs: Setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Prepare
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Test
        run: cargo test --all-features -- --nocapture

  Clippy:
    needs: Setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Load
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          components: clippy

      - name: Lint
        run: cargo clippy --all-features -- -A warnings

  Build:
    needs: Setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Check
        run: cargo check --release --all-features

  Publish:
    needs: [Setup, Check, Tests, Clippy, Build]
    if: needs.Setup.outputs.tag != ''
    runs-on: ubuntu-latest
    outputs:
      published: ${{ steps.publish.outputs.published }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Publish
        id: publish
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: |
          set -e
          echo "published=false" >> $GITHUB_OUTPUT
          echo "${{ secrets.CARGO_REGISTRY_TOKEN }}" | cargo login
          if cargo publish --allow-dirty; then
            echo "published=true" >> $GITHUB_OUTPUT
          else
            echo "❌ publish failed, but continuing."
          fi

  Release:
    needs: [Setup, Check, Tests, Clippy, Build]
    permissions:
      contents: write
      packages: write
    if: needs.Setup.outputs.tag != ''
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Release
        run: |
          gh release create "${{ needs.Setup.outputs.tag }}" \
            --title "${{ needs.Setup.outputs.tag }}" \
            --notes "Release ${{ needs.Setup.outputs.tag }}" \
            --latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  Notice:
    needs: [Setup, Publish, Release]
    if: needs.Publish.outputs.published == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Restore
        uses: actions/cache@v3
        with:
          path: ~/.cargo/bin/toml
          key: toml-cli-${{ runner.os }}

      - name: Output
        run: |
          PACKAGE_NAME=$(toml get Cargo.toml package.name --raw)
          echo "✅ released version ${{ needs.Setup.outputs.version }}"
          echo "📦 https://crates.io/crates/$PACKAGE_NAME"
          echo "🏷️  tag: ${{ needs.Setup.outputs.tag }}"
          echo "🚀 release: ${{ github.server_url }}/${{ github.repository }}/releases/tag/${{ needs.Setup.outputs.tag }}"
